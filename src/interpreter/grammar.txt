source: https://p4.org/p4-spec/docs/P4-16-v1.0.0-spec.pdf
access: march 18, 2019

p4program :
	/* empty */
	| p4program declaration
	| p4program ';' /* empty declaration */
	;


declaration
	: constantDeclaration
	| externDeclaration
	| actionDeclaration
	| parserDeclaration
	| typeDeclaration
	| controlDeclaration
	| instantiation
	| errorDeclaration
	| matchKindDeclaration
	;

nonTypeName
	: IDENTIFIER
	| APPLY
	| KEY
	| ACTIONS
	| STATE
	;


name
	: nonTypeName
	| TYPE
	| ERROR
	;

optAnnotations
	: /* empty */
	| annotations
	;	

annotations
	: annotation
	| annotations annotation
	;

annotation
	: '@' name
	| '@' name '(' expressionList ')'
	;


parameterList
	: /* empty */
	| nonEmptyParameterList
	;


nonEmptyParameterList
	: parameter
	| nonEmptyParameterList ',' parameter
	;

parameter
	: optAnnotations direction typeRef name
	;

direction
	: IN
	| OUT
	| INOUT
	| /* empty */
	;


packageTypeDeclaration
	: optAnnotations PACKAGE name optTypeParameters
	 '(' parameterList ')'
	;


instantiation
	: typeRef '(' argumentList ')' name ';'
	: annotations typeRef '(' argumentList ')' name ';'
	;


optConstructorParameters
	: /* empty */
	| '(' parameterList ')'
	;

dotPrefix
	: '.'
	;


#*******************PARSER*************************************

parserDeclaration
	: parserTypeDeclaration optConstructorParameters
	/* no type parameters allowed in the parserTypeDeclaration */
	'{' parserLocalElements parserStates '}'
	;


parserLocalElement
	: constantDeclaration
	| variableDeclaration
	| instantiation
	;

parserTypeDeclaration
	: optAnnotations PARSER name optTypeParameters '(' parameterList ')'
	;

parserStates
	: parserState
	| parserStates parserState
	;


parserState
	: optAnnotations STATE name '{' parserStatements transitionStatement '}'
	;

parserStatements
	: /* empty */
	| parserStatements parserStatement
	;

parserStatement
	: assignmentOrMethodCallStatement
	| directApplication
	| parserBlockStatement
	| constantDeclaration
	| variableDeclaration
	;

parserBlockStatement
	: optAnnotations '{' parserStatements '}'
	;


transitionStatement
	: /* empty */
	| TRANSITION stateExpression
	;


stateExpression
	: name ';'
	| selectExpression
	;


selectExpression
	: SELECT '(' expressionList ')' '{' selectCaseList '}'
	;


selectCaseList
	: /* empty */
	| selectCaseList selectCase
	;

selectCase
	: keysetExpression ':' name ';'
	;


keysetExpression
	: tupleKeysetExpression
	| simpleKeysetExpression
	;


tupleKeysetExpression
	: '(' simpleKeysetExpression ',' simpleExpressionList ')'
	;

simpleExpressionList
	: simpleKeysetExpression
	| simpleExpressionList ',' simpleKeysetExpression 
	;


simpleKeysetExpression
	: expression
	| DEFAULT
	| DONTCARE
	| expression MASK expression
	| expression RANGE expression
	;


#*************************** CONTROL ******************************

controlDeclaration
	: controlTypeDeclaration optConstructorParameters
	/* no type parameters allowed in controlTypeDeclaration */
	'{' controlLocalDeclarations APPLY controlBody '}'
	;

controlTypeDeclaration
	: optAnnotations CONTROL name optTypeParameters
	'(' parameterList ')'
	;


controlLocalDeclarations
	: /* empty */
	| controlLocalDeclarations controlLocalDeclaration
	;

controlLocalDeclaration
	: constantDeclaration
	| actionDeclaration
	| tableDeclaration
	| instantiation
	| variableDeclaration	
	;

controlBody
	: blockStatement
	;


#*******************EXTERN***************************

externDeclaration
	: optAnnotations EXTERN nonTypeName optTypeParameters '{' methodPrototypes '}'
	| optAnnotations EXTERN functionPrototype ';'
	;

methodPrototypes
	: /* empty */
	| methodPrototypes methodPrototype
	;

functionPrototype
	: typeOrVoid name optTypeParameters '(' parameterList ')'
	;

methodPrototype
	: functionPrototype ';'
	| TYPE '(' parameterList ')' ';'
	;


#************TYPES**********************************

typeRef
	: baseType
	| typeName
	| specializedType
	| headerStackType
	;

prefixedType
	: TYPE
	| dotPrefix TYPE
	;

typeName
	: prefixedType
	;

tupleType
	: TUPLE '<' typeArgumentList '>'
	;

headerStackType
	: typeName '[' expression ']'
	;

specializedType
	: prefixedTYpe '<' typeArgumentList '>'
	;

baseType
	: BOOL
	| ERROR
	| BIT
	| BIT '<' INTEGER '>'
	| INT '<' INTEGER '>'
	| VARBIT'<' INTEGER '>' ;

typeOrVoid
	: typeRef
	| VOID
	| nonTypeName // may be a type variable
	;

optTypeParameters
	: /* empty */
	| '<' typeParameterList '>'
	;

typeParameterList
	: nonTypeName
	| typeParameterList ',' nonTypeName
	;

typeArg
	: DONTCARE
	| typeRef
	;

typeArgumentList
	: typeArg
	| typeArgumentList ',' typeArg
	;

typeDeclaration
	: derivedTypeDeclaration
	| typedefDeclaration
	| parserTypeDeclaration ';'
	| controlTypeDeclaration ';'
	| packageTypeDeclaration ';'
	;

derivedTypeDeclaration
	: headerTypeDeclaration
	| headerUnionDeclaration
	| structTypeDeclaration
	| enumDeclaration
	;

headerTypeDeclaration
	: optAnnotations HEADER name '{' structFieldList '}'
	;


headerUnionDeclaration
	: optAnnotations HEADER_UNION name { structure.declareType(*$3); }
	'{' structFieldList '}' { $$ = new IR::Type_Union(@3, *$3, $1, *$6); }
	;


structTypeDeclaration
	: optAnnotations STRUCT name '{' structFieldList '}'
	;

structFieldList
	: /* empty */
	| structFieldList structField
	;

structField
	: optAnnotations typeRef name ';'
	;

enumDeclaration
	: optAnnotations ENUM name '{' identifierList '}'
	;

errorDeclaration
	: ERROR '{' identifierList '}'
	;

matchKindDeclaration
	: MATCH_KIND '{' identifierList '}'
	;


identifierList
	: name
	| identifierList ',' name
	;

typedefDeclaration
	: annotations TYPEDEF typeRef name ';'
	| TYPEDEF typeRef name ';'
	| annotations TYPEDEF derivedTypeDeclaration name ';'
	| TYPEDEF derivedTypeDeclarationame ';'
	;

#***********************************STATEMENTS**************************

assignmentOrMethodCallStatement
	: lvalue '(' argumentList ')' ';'
	| lvalue '<' typeArgumentList '>' '(' argumentList ')' ';'
	| lvalue '=' expression ';'
	;


emptyStatement
	: ';'
	;


returnStatement
	: RETURN ';'	
	;

exitStatement
	: EXIT ';'
	;

conditionalStatement
	: IF '(' expression ')' statement
	| IF '(' expression ')' statement ELSE statement
	;

// To support direct invocation of a control or parser without instantiation
directApplication
	: typeName '.' APPLY '(' argumentList ')' ';'


statement
	: assignmentOrMethodCallStatement
	| directApplication
	| conditionalStatement
	| emptyStatement
	| blockStatement
	| exitStatement
	| returnStatement
	| switchStatement
	;


blockStatement
	: optAnnotations '{' statOrDeclList '}'
	;

statOrDeclList
	: /* empty */
	| statOrDeclList statementOrDeclaration
	;


switchStatement
	: SWITCH '(' expression ')' '{' switchCases '}'
	;


switchCases
	: /* empty */
	| switchCases switchCase
	;


switchCase
	: switchLabel ':' blockStatement
	| switchLabel ':'
	;


switchLabel
	: name
	| DEFAULT
	;


statementOrDeclaration
	: variableDeclaration
	| constantDeclaration
	| statement
	| instantiation
	;


/****************TABLES***************************/

tableDeclaration
	: optAnnotations TABLE name '{' tablePropertyList '}'
	;


tablePropertyList
	: tableProperty
	| tablePropertyList tableProperty
	;


tableProperty
	: KEY '=' '{' keyElementList '}'
	| ACTIONS '=' '{' actionList '}'
	| CONST ENTRIES '=' '{' entriesList '}'
	/* immutable entries */
	| optAnnotations CONST IDENTIFIER '=' initializer ';' 
	| optAnnotations IDENTIFIER '=' initializer ';'
	;


keyElementList
	: /* empty */
	| keyElementList keyElement
	;


keyElement
	: expression ':' name optAnnotations ';'
	;

actionList
	: actionRef ';' | actionList actionRef ';'
	;

entriesList
 	: entry
    | entryList entry
    
entry
    : optAnnotations keysetExpression ':' actionRef ';'


actionRef
	: optAnnotations name
	| optAnnotations name '(' argumentList ')' 
	;


#**************************ACTION********************************

actionDeclaration
	: optAnnotations ACTION name '(' parameterList ')' blockStatement
	;


variableDeclaration
	: annotations typeRef name optInitializer ';'
	| typeRef name optInitializer ';'
	;


constantDeclaration
	: optAnnotations CONST typeRef name '=' initializer ';'
	;

optInitializer
	: /* empty */
	| '=' initializer
	;

initializer
	: expression
	;

argumentList
	: /* empty */
	| nonEmptyArgList
	;


nonEmptyArgList
	: argument
	| nonEmptyArgList ',' argument
	;

argument
	: expression
	;


expressionList
	: /* empty */
	| expression
	| expressionList ',' expression
	;

member
	: name
	;

prefixedNonTypeName
	: nonTypeName
	| dotPrefix nonTypeName
	;


lvalue
	: prefixedNonTypeName
	| lvalue '.' member
	| lvalue '[' expression ']'
	| lvalue '[' expression ':' expression ']'
	;

%left','
%nonassoc '?'
%nonassoc ':'
%left OR
%left AND
%left '|'
%left '^'
%left '&'
%left EQ NE
%left '<' '>' LE GE
%left SHL
%left PP '+' '-'
%left '*' '/' '%'
%right PREFIX
%nonassoc ']' '(' '['
%left '.'

//Additional precedences need to be specified
expression
: INTEGER
| TRUE
| FALSE
| STRING_LITERAL
| nonTypeName
| '.' nonTypeName
| expression '[' expression ']'
| expression '[' expression ':' expression ']'
| '{' expressionList '}'
| '(' expression ')'
| '!' expression
| '~' expression
| '-' expression
| '+' expression
| typeName '.' member
| ERROR '.' member
| expression '.' member
| expression '*' expression
| expression '/' expression
| expression '%' expression
| expression '+' expression
| expression '-' expression
| expression SHL expression // <<
| expression '>' '>' expression // check that >> are adjacent
| expression LE expression // <=
| expression GE expression // >=
| expression '<' expression
| expression '>' expression
| expression NE expression // !=
| expression EQ expression // ==
| expression '&' expression
| expression '^' expression
| expression '|' expression
| expression PP expression // ++
| expression AND expression // &&
| expression OR expression // ||
| expression '?' expression ':' expression
| expression '<' typeArgumentList '>' '(' argumentList ')'
| expression '(' argumentList ')'
| typeRef '(' argumentList ')'
| '(' typeRef ')' expression
;